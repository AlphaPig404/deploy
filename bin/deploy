#! /usr/bin/env node
const shelljs = require('shelljs')
const path = require('path')
const fs = require('fs')
const chalk = require('chalk')
const bold = chalk.green.underline.bold
const warning = chalk.keyword('orange')
const {resolveLocal, readOptions, getConfName} = require('../utils')

const packageJson = fs.readFileSync(resolveLocal('./package.json'),'utf8')
const _package = JSON.parse(packageJson)
const {start} = require('../index')

const argv = require('yargs')
  .command('init', 'init deploy config', (yargs) => {}, (argv) => {
    const env = argv.env || 'dev'
    process.env.DEPLOY_ENV = env
    initConfig(env)
  })
  .command('start', 'start deploy', (yargs) => {}, (argv) => {
    const env = argv.env || 'pre'
    process.env.DEPLOY_ENV = env
    startDeploy(env)
  })
  .argv

function initConfig(env){
    const defaultConf = {
        name: '',
        host: '',
        port: 22,
        username: '${Username for authentication}',
        password: '/Applications/.pwd',
        remotePath: '${Your remote path}',
        remoteDirName: '${Dest dir name}',
        dist: '${Your local dist path}'
    }
    try{
        const isExists = fs.existsSync(resolveLocal(getConfName(env)))
        if(isExists){
            console.log(`${warning(`${getConfName(env)} already exists:`)}: Config ${bold(getConfName(env))} firstly and use ${bold(`npm run deploy:${env}`)}`);
            return;
        }
        fs.writeFileSync(resolveLocal(getConfName(env)), JSON.stringify(defaultConf, null, 4))
        _package.scripts[`deploy:${env}`] = `deploy-loopslive-web start --env ${env}`
        const str = JSON.stringify(_package, null, 4)
        fs.writeFileSync(resolveLocal('./package.json'),str)
        console.log(`${warning(`deploy ${env}:`)}: Config ${bold(getConfName(env))} firstly and use ${bold(`npm run deploy:${env}`)}`);
        console.log(`deploy init done~!`)
    }catch(err){
        console.log(err)
    }
}

function startDeploy(env){
    try{
        const options = readOptions()
        const arr = Object.keys(options).filter(key => !options[key])
        if(arr.length){
           const str = arr.join(',')
           console.log(`${bold(str)}  is required in ${bold(getConfName(env))} `)
        }else{
            start()
        } 
    }catch(err){
        initConfig(env)
    }
}






